#!/bin/bash
%include <head.h>

# Set the base path where Test_Duck directories are located
BASE_PATH="/work/noaa/nosofs/mjisan/schism/schism_verification_tests"

# Function to find the latest Test_Duck directory
find_latest_run_directory() {
    local latest_dir=$(ls -d ${BASE_PATH}/Test_Duck_* | sort -V | tail -n 1)
    echo "$latest_dir"
}

# Function to check if simulation is complete
check_simulation_complete() {
    local run_dir="$1"
    local outputs_dir="${run_dir}/outputs"
    
    # Check if the outputs directory exists
    if [ ! -d "$outputs_dir" ]; then
        echo "Outputs directory does not exist yet: $outputs_dir"
        return 1
    fi
    
    # Check for the existence of out2d files
    local out2d_files=$(ls ${outputs_dir}/out2d_*.nc 2>/dev/null | wc -l)
    if [ "$out2d_files" -gt 0 ]; then
        echo "Found $out2d_files out2d_*.nc files in $outputs_dir"
        return 0  # Simulation is complete
    else
        echo "No out2d_*.nc files found in $outputs_dir"
        return 1  # Simulation is not complete
    fi
}

# Find the latest run directory
RUN_DIR=$(find_latest_run_directory)
echo "Latest run directory: $RUN_DIR"

# Set maximum wait time (e.g., 12 hours = 43200 seconds)
MAX_WAIT_TIME=43200
START_TIME=$(date +%%s)  # Note the double %% here

# Wait for simulation to complete
echo "Waiting for simulation to complete..."
while true; do
    if check_simulation_complete "$RUN_DIR"; then
        echo "Simulation completed."
        break
    fi
    
    CURRENT_TIME=$(date +%%s)  # Note the double %% here
    ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
    
    if [ $ELAPSED_TIME -ge $MAX_WAIT_TIME ]; then
        echo "Maximum wait time exceeded. Exiting."
        exit 1
    fi
    
    echo "Simulation still running. Waiting 5 minutes before checking again."
    sleep 300  # Wait for 5 minutes
done

%include <tail.h>
